<html>
<head>
<title>Pointers</title>
<link rel="Stylesheet" type="text/css" href="brief.css" />
    <style type="text/css">
        .style1
        {
            text-decoration: underline;
        }
    </style>
</head>
<body>
<h1 class="title" align="center">Pointers and Reference Types</h1>
    <hr />
    <ul>
        <li><b>Pointer:</b> A pointer type variable has a range of values that consists of
            memory addresses and a special value, <font color=yellow>nil</font>
            <ul>
                <li>Provide the power of indirect addressing</li>
                <li>Provide a way to manage dynamic memory</li>
                <li>A pointer can be used to access a location in the area where storage is
                    dynamically created (usually called a heap) </li>
            </ul>
        </li>
        <li><b>Design Issues:</b><ul>
            <li>What are the scope of and lifetime of a pointer variable? </li>
            <li>What is the lifetime of a heap-dynamic variable? </li>
            <li>Are pointers restricted as to the type of value to which they can point?
            </li>
            <li>Are pointers used for dynamic storage management, indirect addressing, or both?
            </li>
            <li>Should the language support pointer types, reference types, or both? </li>
            </ul>
        </li>
        <li><b>Pointer Operations:</b><ul>
            <li>Two fundamental operations: assignment and dereferencing </li>
            <li>Assignment is used to set a pointer variable’s value to some useful address
            </li>
            <li>Dereferencing yields the value stored at the location represented by the
                pointer’s value
                <ul>
                    <li>Dereferencing can be explicit or implicit </li>
                    <li>C++ uses an explicit operation via *
                        <ul>
                            <li>j = *ptr sets j to the value located at ptr </li>
                            <p><img alt="Pointer diagram" src=pointers1.png style="height: 176px; width: 292px" /></p>
                        </ul>
                    </li>
                </ul>
            </li>
            </ul>
        </li>
        <li><b>Problems with Pointers:</b><ul>
            <li>Dangling pointers (dangerous)
                <ul>
                    <li>A pointer that contains the address of a heap-dynamic variable that has been
                        deallocated </li>
                </ul>
            </li>
            <li>Lost heap-dynamic variable (often called garbage)
                <ul>
                    <li>An allocated heap-dynamic variable that is no longer accessible to the user
                        program
                        <ol>
                            <li>Pointer p1 is set to point to a newly created heap-dynamic variable  </li>
                            <li>Pointer p1 is later set to point to another newly created heap-dynamic variable
                            </li>
                            <li>The process of losing heap-dynamic variables is called <font color=yellow>memory leakage</font> </li>
                        </ol>
                    </li>
                </ul>
            </li>
            </ul>
        </li>
        <li><b>Pointers in Ada:</b><ul>
            <li>Called <b>access</b> types</li>
            <li>The dangling-pointer problem is theoretically constrained in Ada because the
                implementor may implicitly deallocate heap-dynamic variables at the end of the
                scope of the pointer. Unfortunately, most Ada compilers do not implement this
                form of garbage collection.</li>
            <li>The lost heap-dynamic variable problem is not eliminated by Ada&#39;s design.</li>
            </ul>
        </li>
        <li><b>Pointers in C and C++:</b><ul>
            <li>Extremely flexible but must be used with care </li>
            <li>Pointers can point at any variable regardless of when or where it was allocated
            </li>
            <li>Used for dynamic storage management and addressing </li>
            <li>Pointer arithmetic is possible </li>
            <li>Explicit dereferencing and address-of operators </li>
            <li>Domain type need not be fixed (void *)
                <ul>
                    <li>void * can point to any type and can be type checked (cannot be de-referenced)
                    </li>
                </ul>
            </li>
            <li>Pointer Arithmetic:</li>
            <p><code>
            int list[10];
            <br />int *ptr;
            <br />ptr = list;
            <br />
            <br />*(ptr + 5) is equivalent to list[5] and  ptr[5]
            <br />*(ptr + i) is equivalent to list[i] and  ptr[i]
            <br />ptr[index] is equivalent to list[index]</code></p>
            </ul>
        </li>
        <li><b>Reference Types:</b><ul>
            <li>C++ includes a special kind of reference type that is used primarily for formal
                parameters in function definitions
                <ul>
                    <li>Reference type variables are specified in definitions by preceding their names
                        with ampersands (&amp;)</li>
                </ul>
            </li>
            <li>Java extends C++’s reference variables and allows them to replace pointers
                entirely
                <ul>
                    <li>References are references to objects, rather than being addresses </li>
                </ul>
            </li>
            <li>C# includes both the references of Java and the pointers of C++ </li>
            </ul>
        </li>
        <li><b>Evaluation:</b><ul>
            <li>Dangling pointers and dangling objects are problems as is heap management</li>
            <li>Pointers are like goto&#39;s--they widen the range of cells that can be accessed by
                a variable </li>
            <li>Pointers or references are necessary for dynamic data structures--so we can&#39;t
                design a language without them </li>
            </ul>
        </li>
        <li><b>Proposed Solutions to Dangling-Pointer Problem:</b><ul>
            <li><font color=yellow>Tombstone:</font> extra heap cell that is a pointer to the heap-dynamic variable
                <ul>
                    <li>The actual pointer variable points only at tombstones </li>
                    <li>When heap-dynamic variable de-allocated, tombstone remains but set to nil
                    </li>
                    <li>Prevents a pointer from ever pointing to a deallocated variable</li>
                    <li>Costly in time and space</li>
                </ul>
            </li>
            <li><font color=yellow>Locks-and-keys:</font> Pointer values are represented as (key, address) pairs
                <ul>
                    <li>Heap-dynamic variables are represented as the storage for a variable plus a
                        header cell for integer lock
                        value </li>
                    <li>When a heap-dynamic variable is allocated, a lock value is created and placed in lock
                        cell of the variable and the key cell of the pointer</li>
                    <li>Any number of pointers can reference a heap-dynamic variable</li>
                    <li>When deallocated, the lock value is cleared to an illegal lock value</li>
                </ul>
            </li>
            </ul>
        </li>
        <li><b>Heap Management:</b><ul>
            <li>A very complex run-time process </li>
            <li>Single-size cells vs. variable-size cells </li>
            <li>Two approaches to reclaim garbage
                <ul>
                    <li>Reference counters (<font color=yellow>eager approach</font>): reclamation is gradual
                        <ul>
                            <li>maintain a counter in every cell that stores the number of pointers currently
                                pointing at the cell </li>
                            <li><span class="style1">Disadvantages</span>: space required, execution time
                                required, complications for cells connected circularly</li>
                            <li><span class="style1">Advantage</span>: it is intrinsically incremental, so
                                significant delays in the application execution are avoided </li>
                        </ul>
                    </li>
                    <li>Mark-sweep (<font color=yellow>lazy approach</font>): reclamation occurs when the list of variable space
                        becomes empty
                        <ul>
                            <li>The run-time system allocates storage cells as requested and disconnects
                                pointers from cells as necessary; mark-sweep then begins
                                <ul>
                                    <li>Every heap cell has an extra bit used by the collection algorithm </li>
                                    <li>All cells are initially set to garbage </li>
                                    <li>All pointers are traced into the heap, and reachable cells are marked as not
                                        garbage </li>
                                    <li>All garbage cells are returned to list of available cells </li>
                                </ul>
                            </li>
                            <li><span class="style1">Disadvantages</span>: in its original form, it was done too
                                infrequently. When done, it caused significant delays in application execution.
                                Contemporary mark-sweep algorithms avoid this by doing it more often—called
                                <font color=yellow>incremental mark-sweep</font> </li>
                        </ul>
                    </li>
                </ul>
            </li>
            <li>Variable-size Cells: All the difficulties of single-size cells plus more
                <ul>
                    <li>Required by most programming languages </li>
                    <li>If mark-sweep is used, additional problems occur
                        <ul>
                            <li>The initial setting of the indicators of all cells in the heap is difficult
                            </li>
                            <li>The marking process in nontrivial </li>
                            <li>Maintaining the list of available space is another source of overhead </li>
                        </ul>
                    </li>
                </ul>
            </li>
            </ul>
        </li>
    </ul>

<div class="navbar" align="center" style="color: #FFFF00">
<hr>
<a href="unions.htm">previous</a> &nbsp; <a href="type-checking.htm">next</a>
&nbsp; <a href="DataTypes.htm">contents</a><br /><br />
</div>

</body>
</html>
